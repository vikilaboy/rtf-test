user                    www-data;
worker_processes        auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile    100000;

pid                     /var/run/nginx.pid;
error_log               stderr notice;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections  4096;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept        on;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use                 epoll;
}

http {
    # Somehow it's not inherited by vhosts (server{} context) when using with 'stderr' value.
    # Therefore it's re-defined here to avoid specyfing it for each vhost.
    error_log           stderr notice;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # to boost I/O on HDD we can disable access logs
    access_log          off;

    # reduce the data that needs to be sent over network
    gzip                on;
    gzip_min_length     10240;
    gzip_proxied        expired no-cache no-store private auth;
    gzip_types          text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
    gzip_disable        "msie6";
    gzip_comp_level     4;
    gzip_vary           off;
    gzip_static         on;

    # don't send the nginx version number in error pages and Server header
    server_tokens       off;

    # config to don't allow the browser to render the page inside an frame or iframe
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

     #enable CORS
    #add_header 'Access-Control-Allow-Origin' '*';
    #add_header 'Access-Control-Allow-Credentials' 'true';
    #add_header 'Access-Control-Allow-Methods' 'GET,PUT,POST,DELETE,OPTIONS';
    #add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With,X-Locale';

    # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
    sendfile            off;

    server_names_hash_bucket_size 128;
    types_hash_max_size     2048;
    types_hash_bucket_size  64;

    # send headers in one peace, its better then sending them one by one
    tcp_nopush          on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay         on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection   on;

    # request timed out -- default 60
    client_body_timeout         10;

    # if client stop responding, free up memory -- default 60
    send_timeout                2;

    # server will close connection after this time -- default 75
    keepalive_timeout           30;

    include             /etc/nginx/conf.d/*.conf;
    open_file_cache     max=100;
}
